org 100h
di
ld a,40h
out (40h),a
call cls
call display_icon
wzitk:
ld a,08h
out (11h),a
in a,(10h)
and 32
jp  z,wzitk
call cls
call init
call shship
mainl:
ld a,(scro)
add a,40h
out (40h),a
ld a ,(count)
and 001
jp nz,nkey
call puwall
ld a,(scpos)
cp 143
jp nz,smain
ld a,00h
ld (scpos),a
jp keytes
smain:
ld hl,scpos
inc (hl)
keytes:
;ret
in a,(1Fh)
rlca
ret C
ld hl,(score)
inc hl
ld (score),hl

noscr:
ld a ,(count)
and 01h
jp nz,nkey
call keyb
call shshi2
nkey:


call displ3

ld hl,count
inc (hl)

ld a,(score)
cp 100
jp nz,kl
ld (activ),a
kl:
ld a,(toup)
cp 0
jp z,mainl
;;ending
ld bc,0ffffh
call wait
;;flash
ld a,0a7h
out (40h),a
ld bc,0ffffh
call wait
ld a,0a6h
out (40h),a
ld bc,0ffffh
call wait
ld a,0a7h
out (40h),a
ld bc,0ffffh
call wait
ld a,0a6h
out (40h),a
ld bc,0ffffh
call cls
ld hl,(score)
call  ToDec16
ld b,11
ld hl,scstr
ld de,0101h
call 0bff1h
;call cls
ret



;display icon
display_icon:
ld hl,image_data

ld b,144
disply_line:

ld c,0
disploop:
ld a,B
and 0fh 
out (40h),A
ld a,B
srl A
srl A
srl A
srl a
or 010h
out (40h),A
ld a,0b0h
or C
out (40h),A

ld a,(hl)
call ReverseBits
out (41h),A
inc hl

inc C
ld a,C
cp 6
jp nz,disploop
djnz disply_line

ret


cls: 
LD B, 144
LD DE, 0
CLS0: LD A, 32
CALL 0BFEEH
RET
LD B,24
LD E,0
JP CLS0

wait:
nop
nop
nop
nop
dec bc
ld a,b
or c
jp nz,wait
ret


init:
;cls
ld c,0
ld hl,screen
lcls:
ld a,0
ld b,144
lcls1:
ld (hl),a
inc hl
djnz lcls1
inc c
ld a,c
cp 16
jp nz,lcls

ld a,22
ld (twall),a
ld b,0
ld c,0
ld (score),bc
ld a,26
ld (posx),a
ld a,8
ld (scro),a
ld a,0
ld (toup),a
ld a,0
ld (activ),a
ld (count),a
ret

createwall:
ld hl,waldb
ld bd,0ffffh
ld (hl),BC
inc hl
inc hl
ld (hl),bc
inc hl
inc hl
ld (hl),bc
inc hl
inc hl
ld (hl),bc
ld b,(walhe)
ld ix,waldb
locreate:
rl (ix+0)
rl (ix+1)
rl (ix+2)
rl (ix+3)
rl (ix+4)
rl (ix+5)
rl (ix+6)
rl (ix+7)
djnz locreate


ret


puwall:

ld a,(activ)
cp 0
jp z,spw
call PRNG
jp spw2
spw:
ld a,(wallpo)
spw2:
call mask
ld ix,screen
ld iy,screen
ld hl,waldb
push bc
ld b,0
ld a,(scpos)
cp 0
jp z,start
sub 1

ld c,a
add ix,bc
add iy,bc
ld b,0
ld c,144
add iy,bc
pop bc
ld a,(hl)
ld (ix+0),a
ld (iy+0),a
inc hl
ld a,C
ld b,1
ld c,1fh
add ix,bc
add iy,bc
ld a,(hl)
ld (ix+0),a
ld (iy+0),a
inc hl
add ix,bc
add iy,bc
ld d,(hl)
ld (ix+0),d
ld (iy+0),d
inc hl
add ix,bc
add iy,bc
ld e,(hl)
ld (ix+0),e
ld (iy+0),e
inc hl
add ix,bc
add iy,bc
ld a,(hl)
ld (ix+0),a
ld (iy+0),A
inc hl
add ix,bc
add iy,bc
ld a,(hl)
ld (ix+0),a
ld (iy+0),a
inc hl
;ld hl,shift1
add ix,bc
add iy,bc
ld a,(hl)
ld (ix+0),A
ld (iy+0),A
inc hl
add ix,bc
add iy,bc
ld a,(hl)
ld (ix+0),A
ld (iy+0),A
ret
start:
ld a,143

ld c,a
add ix,bc
pop bc
ld (ix+0),b
ld a,c
ld b,1
ld c,1fh
add ix,bc
ld (ix+0),a
add ix,bc
ld (ix+0),d
add ix,bc
ld (ix+0),e
add ix,bc
ld (ix+0),h
add ix,bc
ld (ix+0),l
ld hl,shift1
add ix,bc
ld a,(hl)
ld (ix+0),A
inc hl
add ix,bc
ld a,(hl)
ld (ix+0),A

ret




;create a random number do -3 and add the wall
PRNG:
;PUSH DE
;PUSH HL
LD DE,(RVAL16)
LD H,E
LD L,1
ADD HL,DE
ADD HL,DE
ADD HL,DE
ADD HL,DE
ADD HL,DE
LD A,H
LD (RVAL16),HL
LD A,(RVAL88)
sub3:
cp 3
jp c,esub3
sub 3
jp sub3
esub3:
dec a
ld b,a
ld HL,twall
add A,(HL)
bit 7,a
jp nz,inf
cp 
jp c, store
ld a,40
ld b,0
jp store
inf:
ld a,0
ld b,0
store:
ld (HL),a
ld (hl),b
;POP HL
;POP DE
RET 

mask:
push af
ld a,0ffh
ld (shift1),A
ld (shift2),a
pop af
ld ix,shift1
ld iy ,shift2
ld b,0
ld c,0h
ld d,0h
ld e,0ffh
ld h,0ffh
ld l,0ffh
lmask:
cp 0
jp z,elmask
scf
rl B
rl C
rl d
rl e
rl h
rl l
rl (ix+0)
rl (iy+0)
dec A
jp lmask
elmask:
ret



shship:
;push hl

ld iy, ship
ld ix,shmap

ld a,0
l33:
push af
ld b,(iy+0)
inc iy
ld c,(iy+0)
ld d,0
ld h,0
ld l,0
ld a,0
ld (shift1),A
ld (shift2),a

ld a,(posx)
ld e,0

l32:
cp 0
jp z,el32
sla B
rl c
rl d
rl e
rl H
rl l
push hl
ld hl,shift1
rl (hl)
ld hl,shift2
rl (hl)
pop hl
dec a
jp l32
el32:
ld (ix+0),b
ld (ix+14),c
ld (ix+28),d
ld (ix+42),E
ld (ix+56),h
ld (ix+70),l
ld a,(shift1)
ld (ix+84),a
ld a,(shift2)
ld (ix+98),a
inc iy
inc ix
pop af
inc A
cp 14
;pop de
jp nz,l33
;pop de
;pop hl
ret

shshi2:

ld a,(deltap)
cp 0
jp nz, sda
ret
sda:
ld iy, shmap
ld ix,shmap

ld a,0

l332:
push af
ld b,(ix+0)
ld c,(ix+14)
ld d,(ix+28)
ld e,(ix+42)
ld h,(ix+56)
ld l,(ix+70)

ld a,(deltap)
bit 7,A
jp nz,onde
sla B
rl c
rl d
rl e
rl H
rl l
rl (ix+84)
rl (ix+98)
jp ste
onde:
srl (ix+98)
rr (ix+84)
rr l
rr H
rr E
rr d
rr c
rr B
ste:
ld (ix+0),b
ld (ix+14),c
ld (ix+28),d
ld (ix+42),E
ld (ix+56),h
ld (ix+70),l


inc ix
pop af
inc A
cp 14
;pop de
jp nz,l332
;pop de

ret


keyb:
;push hl
ld a,1
out (11h),A
in a,(10h)
and 4
jp nz,kw
ld a,4
out (11h),A
in a,(10h)
and 2
jp nz,ks
;pop hl
ld a,0
ld (deltap),a
ret
kw:
ld hl,posx
ld a,(hl)
dec A
bit 7,A
jp z,decr
ld a,0
ld (deltap),a
ret
decr:
dec (HL)
ld a,0ffh
ld (deltap),a
ld a,(hl)
ld hl,scro
sub (hl)
cp 8
jp nz,exi
ld a,(scro)
cp 0
jp z,exi
;ld hl, scro
dec (hl)
exi:
ret
ks:
ld hl,posx
ld a,(hl)
inc A
cp 50
jp c,incr
ld a,0
ld (deltap),a
ret
incr:
inc (HL)
ld a,1
ld (deltap),a
ld a,(hl)
ld hl,scro
sub (hl)
cp 26
jp nz,exi2
ld a,(scro)
cp 10h
jp z,exi2
;ld hl, scro
inc (hl)
exi2:
;pop hl
ret

displ3:
ld d,0
ld e,143
ld hl,screen
ld ix,shmap
ld a,(scpos)
ld b,0
ld c,a
add hl,bc
ld c,0
mdisp3:
ld a,0
out (40h),A
ld a,10h
out (40h),a
ld a,c
or 0b0h
out (40h),A
ld a,c
ld b,144
ld c,41h
otir
ld c,a
;k13:
;ld a,(hl)
;out (41h),A
;inc hl
;djnz k13
push de
push hl
push bc
ld a,0
out (40h),A
ld a,12h
out (40h),a
ld a,c
or 0b0h
out (40h),A
ld b,14
and a
ld d,0
ld e,112
and A
sbc hl,de
diss:

ld a,(ix+0)
ld d,(hl)
and d
jp z,sdf
;ld a,0
ld (toup),a
sdf:
ld a,(ix+0)
ld d,(hl)
or d
out (41h),a
inc ix
inc hl
djnz diss
pop bc
pop hl
pop de
add hl,de
inc c
ld a,C
cp 8
jp nz,mdisp3
;pop bc
;pop hl
ret

; Divides HL by 10 using binary long division
; Input:  HL = 16-bit unsigned value
; Output: HL = quotient
;         A  = remainder (0–9)
; Uses:   AF, BC, DE

; Input:  HL = 16-bit value
; Output: [DE] = null-terminated ASCII decimal string
; Temp:   Uses a small buffer to reverse string

ToDec16:


    ld bc, scdstr   ; Temporary buffer for digits
    inc bc
    inc bc
    inc bc
    inc bc
   ; ld a, 0             ; Digit count
   ; ld (DigitCount), a
   ld e,4
DivideLoop:
    call DivMod10       ; HL = HL / 10, A = remainder (0–9)
    add a, 48
    ld (bc), a          ; Store ASCII digit
    dec bc

    ;ld a, (DigitCount)
   ; inc a
   ;ld (DigitCount), a
   ld a,e
   dec a
   ld e,a

   cp 0
   jp nz,DivideLoop

DoneDividing:
    ; Reverse the digits into output buffer (DE)
   ; ld a, (DigitCount)
   ; or a
    ;jr nz, OutputDigits

    ; HL was zero, so output '0'


    ret

DivMod10:
push bc
push de
    ld bc, 0        ; BC will store the quotient
    ld de, 0        ; DE is the remainder
    ld a, 16        ; 16 bits to process
Div10Loop:
    ; Shift DE:HL left by 1 bit (double the whole number)
    add hl, hl      ; HL <<= 1
    rl e
    rl d
    push af
    ; After shift, remainder is in DE
    ; Try to subtract 10 from DE
    ld a, d
    cp 0
    jr nz, SkipSub
    ld a, e
    cp 10
    jr c, SkipSub

    ; Subtract 10 from DE
    ld a, e
    sub 10
    ld e, a

    ; Set current quotient bit
    sla c           ; shift left C
    rl b
    inc c           ; set bit 0
    jr SkipShift

SkipSub:
    ; Set current quotient bit to 0
    sla c           ; shift left C
    rl b

SkipShift:
pop af
    dec a
    cp 0
    jp nz, Div10Loop

    ; Move quotient from BC to HL
    ld h, b
    ld l, c

    ld a, e         ; remainder in A
    ld (qs),bc
    ld (rest),de
    pop de
    pop bc
    ret

ReverseBits:
push bc
    LD B, 8        ; Bit count
    LD C, 0        ; Result

RevLoop:
    sla a           ; Rotate A left, MSB → Carry
    ;ccf
    Rr C          ; Rotate C left, Carry → LSB
    DJNZ RevLoop
    LD A, C        ; Return result in A
   pop bc
    RET

TWIDTH: DB 14H
twall:  DB 22
wallpo: db 17
walhe: db 30
waldb: db 0,0,0,0,0,0,0,0
RVAL16: DB 30H
RVAL88: DB 81H
deltap: db 0
count: db 0
scstr: db 'S','C','O','R','E',':'
scdstr: db 48,48,48,48,48
;ship: db 65,16,227,24,247,29,255,31,255,31,255,31,249,19,241,17,240,1,160,0,160,0,224,0,64,0,64,0
ship: db 0,0,32,0,113,4,249,6,255,7,255,7,255,7,249,4,249,4,248,0,112,0,80,0,112,0,32,0
toup:db 0
shift1:db 00H
shift2:db 00h
scpos:db 00h
spos:db 00h

scrod: db 41h,41h ,41h,41h,41h,41h
qs: db 255,255
rest: db 255,255
scro:db 0fh
posx:DB 24
scro2:db 0
score:db 0,0
activ:db 0
image_data:
    DB 0xCF, 0xFF, 0xFF, 0xF0, 0x7F, 0xE3, 0xCF, 0xFF, 0xFF, 0xE0, 0x7F, 0xE3
    DB 0xC7, 0xE1, 0xFF, 0xE0, 0x7F, 0xC3, 0xC7, 0x80, 0xFF, 0x60, 0x7F, 0xC3
    DB 0xE6, 0x04, 0xFF, 0x60, 0xFF, 0xC3, 0xE2, 0x0C, 0xFE, 0x60, 0xFF, 0x83
    DB 0xE2, 0x7E, 0xFC, 0x60, 0xFF, 0x83, 0xF3, 0xFE, 0x7C, 0x60, 0xFF, 0x87
    DB 0xE3, 0xFE, 0x78, 0x60, 0xFF, 0x87, 0xE3, 0xFE, 0x78, 0x60, 0xFF, 0x07
    DB 0xE3, 0x1F, 0x30, 0x60, 0xFF, 0x07, 0xF3, 0x8F, 0x30, 0x60, 0xFF, 0x0F
    DB 0xF9, 0x83, 0x20, 0x60, 0xFE, 0x0F, 0xF9, 0x82, 0xA0, 0xE0, 0xFE, 0x1F
    DB 0xF1, 0x80, 0x00, 0xE1, 0xFC, 0x1F, 0xF9, 0xC0, 0x00, 0xC1, 0xFC, 0x1F
    DB 0xF9, 0xE0, 0x00, 0xC1, 0xFC, 0x1F, 0xFD, 0xF0, 0x00, 0xC1, 0xFC, 0x3F
    DB 0xFF, 0xF8, 0x01, 0xC1, 0xFC, 0x3F, 0xFF, 0xFC, 0x01, 0xC1, 0xF8, 0x7F
    DB 0xFF, 0xFE, 0x03, 0xC1, 0xF8, 0x7F, 0xFF, 0xFE, 0x03, 0xC3, 0xF8, 0x7F
    DB 0xFF, 0xDF, 0x07, 0xC3, 0xF0, 0x7F, 0xFF, 0xCF, 0xCF, 0xC3, 0xF0, 0xFF
    DB 0xFF, 0xC7, 0xEF, 0xC3, 0xF0, 0xFF, 0xF7, 0xC3, 0xFF, 0xC3, 0xF1, 0xFF
    DB 0xF7, 0xC1, 0xFF, 0xC7, 0xE1, 0xFF, 0xF7, 0xC0, 0xFF, 0xC7, 0xE1, 0xFF
    DB 0xF7, 0xC0, 0x7F, 0xC7, 0xE1, 0xFF, 0xE7, 0xE0, 0x3F, 0xC7, 0xE3, 0xFF
    DB 0xE7, 0xE0, 0x3F, 0xC7, 0xC3, 0xFB, 0xE7, 0xE0, 0x17, 0xC7, 0xC3, 0xFB
    DB 0xE7, 0xE0, 0x33, 0xC7, 0xC7, 0xF3, 0xE7, 0xE0, 0x70, 0xCF, 0x87, 0xF3
    DB 0xE3, 0xF0, 0x70, 0x4F, 0x87, 0xE3, 0xE3, 0xF1, 0xF0, 0x0F, 0x8F, 0xE3
    DB 0xF3, 0xF3, 0xF0, 0x4F, 0x8F, 0xE3, 0xFB, 0xF3, 0xF0, 0x7F, 0x17, 0xC3
    DB 0xFB, 0xFF, 0xF0, 0x7F, 0x1F, 0x83, 0xF9, 0xFF, 0xF0, 0x7F, 0x1F, 0x87
    DB 0xF9, 0xFF, 0xF0, 0x7E, 0x0F, 0x07, 0xFD, 0xFF, 0xF0, 0xE6, 0x2F, 0x0F
    DB 0xFD, 0xFF, 0xF8, 0xE6, 0x3E, 0x0F, 0xFD, 0xFF, 0xF8, 0xE6, 0x5D, 0x0F
    DB 0xFD, 0xFF, 0xFC, 0xC4, 0x59, 0x1F, 0xFF, 0xFF, 0xDC, 0xC0, 0x59, 0x1F
    DB 0xFF, 0xFF, 0x9E, 0xC0, 0x91, 0x1F, 0xFF, 0xFE, 0x1E, 0xC2, 0xB3, 0x3B
    DB 0xFF, 0xFC, 0x1E, 0xC6, 0xA3, 0x3B, 0xFF, 0xFC, 0x1F, 0x87, 0x03, 0x73
    DB 0xFF, 0xFE, 0x1F, 0x87, 0x07, 0x73, 0xFF, 0xFE, 0x1F, 0x07, 0x07, 0xE3
    DB 0xFF, 0xEE, 0x1F, 0x0E, 0x87, 0xC7, 0xFF, 0xEE, 0x0E, 0x4E, 0x07, 0xC7
    DB 0xFF, 0xCE, 0x0E, 0x4C, 0x0F, 0x87, 0xFF, 0xCE, 0x16, 0x4E, 0x0F, 0x8F
    DB 0xFF, 0xCF, 0x36, 0x5C, 0x0F, 0x0F, 0xFB, 0xCF, 0x62, 0x5C, 0x0E, 0x0F
    DB 0xF3, 0xCF, 0xC8, 0xDA, 0x1E, 0x1F, 0xF3, 0xEF, 0x88, 0xFA, 0x1E, 0x1F
    DB 0xF3, 0xE7, 0x8C, 0xFC, 0x3E, 0x1F, 0xFB, 0xE7, 0x8F, 0xF9, 0x3E, 0x1F
    DB 0xFB, 0xF7, 0x8F, 0xF1, 0x3C, 0x3F, 0xFB, 0xFF, 0x8D, 0xB3, 0x3C, 0x3F
    DB 0xFB, 0xFF, 0xDD, 0xB3, 0x3C, 0x3B, 0xF3, 0xFF, 0xF5, 0xA7, 0x7C, 0x3B
    DB 0xE3, 0xF7, 0xF5, 0x26, 0x7C, 0x7B, 0xE3, 0xF7, 0xC5, 0x2E, 0x7C, 0x7B
    DB 0xE3, 0xF7, 0xC7, 0x4E, 0x7C, 0x7B, 0xE3, 0xF7, 0xC7, 0x5E, 0x7C, 0x7B
    DB 0xE3, 0xF7, 0xD6, 0xBE, 0xFC, 0xF3, 0xF3, 0xF7, 0xFA, 0xBE, 0xBC, 0xF3
    DB 0xF3, 0xFF, 0xEA, 0xBE, 0x98, 0xF3, 0xF3, 0xFF, 0xEA, 0xFE, 0xD9, 0xF3
    DB 0xF3, 0xFF, 0xEE, 0xFC, 0xC9, 0xF3, 0xFB, 0xFF, 0xFE, 0xFC, 0xE9, 0xF3
    DB 0xFB, 0xFF, 0xF6, 0xFC, 0xEB, 0xE3, 0xFB, 0xFF, 0xF6, 0xF4, 0xFB, 0xE3
    DB 0xFB, 0xFF, 0xF6, 0x64, 0xFB, 0xE3, 0xFF, 0xFF, 0xFE, 0xC4, 0x7B, 0xE3
    DB 0xFF, 0xFF, 0xFD, 0x8C, 0x3B, 0xE3, 0xFF, 0xFB, 0xFD, 0x2C, 0x3F, 0xC3
    DB 0xFF, 0xFB, 0xFD, 0x28, 0x1F, 0xC3, 0xFF, 0xFB, 0xDD, 0x1A, 0x1F, 0xC3
    DB 0xFF, 0xFB, 0xDD, 0x12, 0x07, 0xC3, 0xFF, 0xBB, 0xDC, 0x12, 0x0F, 0xC3
    DB 0xFF, 0x99, 0x5C, 0x93, 0x0F, 0xC3, 0xFF, 0xD9, 0x5C, 0xB3, 0x1F, 0x83
    DB 0xFF, 0xD8, 0x5C, 0xE3, 0x1F, 0x83, 0xEF, 0xC8, 0x7C, 0xE3, 0x9F, 0x83
    DB 0xE3, 0xC8, 0x74, 0x73, 0x9F, 0x83, 0xF1, 0xC0, 0x16, 0x71, 0xFF, 0x83
    DB 0xF0, 0xE0, 0x96, 0x31, 0xFF, 0x83, 0xF8, 0x60, 0x96, 0x21, 0xEF, 0x83
    DB 0xFC, 0x30, 0x1E, 0x21, 0xEF, 0x83, 0xFC, 0x01, 0x3E, 0xA8, 0xCF, 0x83
    DB 0xFE, 0x01, 0x2E, 0xA8, 0xCF, 0xC3, 0xFE, 0x01, 0x8E, 0xA8, 0xCF, 0xC3
    DB 0xFF, 0x03, 0xCA, 0x64, 0xE7, 0xC3, 0xFF, 0x03, 0xC2, 0x42, 0x67, 0xC3
    DB 0xF0, 0x03, 0xD2, 0x42, 0x63, 0xC3, 0xFC, 0x05, 0xF1, 0x01, 0x23, 0xC3
    DB 0xFF, 0x04, 0x71, 0x01, 0x33, 0xC3, 0xFF, 0x00, 0x71, 0x20, 0xB1, 0xC3
    DB 0xFF, 0x08, 0x71, 0x20, 0xB1, 0xE3, 0xEF, 0x08, 0x71, 0x00, 0xF0, 0xE3
    DB 0xE7, 0x80, 0x61, 0x30, 0x50, 0xE3, 0xC3, 0x90, 0x61, 0xB0, 0x30, 0xE3
    DB 0xC7, 0x90, 0xE3, 0x90, 0x30, 0x63, 0xC7, 0x00, 0xE7, 0x90, 0x10, 0x03
    DB 0xC7, 0x20, 0xFF, 0x98, 0x00, 0x03, 0xCE, 0x38, 0xFF, 0x98, 0x00, 0x03
    DB 0x8C, 0x3E, 0x9F, 0x98, 0x00, 0x03, 0x9C, 0x7F, 0x1F, 0x9C, 0x00, 0x03
    DB 0x98, 0xFF, 0x1F, 0xCC, 0x00, 0x03, 0x99, 0xFF, 0x1F, 0xCC, 0x00, 0x03
    DB 0x9B, 0xFF, 0x1F, 0xCE, 0x00, 0x03, 0x93, 0x9E, 0x1F, 0xCE, 0x00, 0x03
    DB 0xE7, 0x8E, 0x3F, 0xC6, 0x00, 0x03, 0xFF, 0x86, 0x7F, 0x47, 0x00, 0x03
    DB 0xFF, 0x83, 0xF8, 0x47, 0x00, 0x03, 0xFF, 0x03, 0xF0, 0x67, 0x00, 0x03
    DB 0xFE, 0x03, 0xE0, 0x23, 0x80, 0x03, 0xFE, 0x03, 0x80, 0x23, 0x80, 0x03
    DB 0xFE, 0x03, 0x80, 0x63, 0x80, 0x03, 0xFE, 0x03, 0x80, 0x23, 0xC0, 0x03
    DB 0xFE, 0x03, 0x80, 0x21, 0xC0, 0x03, 0xFC, 0x03, 0x80, 0x21, 0xC0, 0x03
    DB 0xFC, 0x03, 0x80, 0x31, 0xE0, 0x03, 0xFC, 0x03, 0x80, 0x30, 0xE0, 0x03
    DB 0xFC, 0x07, 0x80, 0x30, 0xE0, 0x03, 0xF8, 0x07, 0x80, 0x30, 0xF0, 0x03
    DB 0xF8, 0x07, 0x80, 0x10, 0x78, 0x03, 0xF8, 0x07, 0x80, 0x18, 0x78, 0x03
    DB 0xF8, 0x07, 0x80, 0x18, 0x7C, 0x03, 0xF0, 0x07, 0x80, 0x18, 0x7C, 0x03
    DB 0xF0, 0x07, 0x00, 0x18, 0x7C, 0x03, 0xF0, 0x0F, 0x00, 0x18, 0x3E, 0x03
    DB 0xF0, 0x0F, 0x00, 0x1C, 0x3E, 0x03, 0xE0, 0x0F, 0x00, 0x0C, 0x1F, 0x03
    DB 0xE0, 0x0F, 0x00, 0x0C, 0x1F, 0x03, 0xE0, 0x0F, 0x00, 0x0C, 0x1F, 0x83
    DB 0xC0, 0x0F, 0x00, 0x0C, 0x1F, 0x83, 0xC0, 0x1F, 0x00, 0x0C, 0x0F, 0xC3
endsc: db 0
screen: ds 2304
shmap: ds 120


